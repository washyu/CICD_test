pipeline {
    agent {
        docker {
            image 'docker:dind'
            args '-v /var/run/docker.sock:/var/run/docker.sock -v ${WORKSPACE}:/workspace -w /workspace'
        }
    }

    environment {
        REGISTRY = "aiserver:5000"
        TAG = "${BUILD_NUMBER}"
        DOCKER_CREDENTIALS = credentials('docker-registry-credentials')
        DOCKER_USER = "${DOCKER_CREDENTIALS_USR}"
        DOCKER_PASSWORD = "${DOCKER_CREDENTIALS_PSW}"
    }

    stages {
        stage('Setup') {
            steps {
                sh 'apk add --no-cache curl'
                sh 'curl -LO "https://dl.k8s.io/release/stable.txt"'
                sh 'curl -LO "https://dl.k8s.io/release/$(cat stable.txt)/bin/linux/amd64/kubectl"'
                sh 'chmod +x kubectl'
                sh 'mv kubectl /usr/local/bin/'
            }
        }

        stage('Test') {
            steps {
                sh 'apk add --no-cache nodejs npm'
                sh 'cd demo-webapp/backend && npm install && npm test'
                sh 'cd demo-webapp/frontend && npm install && npm test -- --watchAll=false'
            }
        }

        stage('Build') {
            steps {
                sh 'ls -la'
                sh 'docker build -t ${REGISTRY}/demo-webapp-backend:${TAG} -f demo-webapp/backend/Dockerfile demo-webapp/'
                sh 'docker build -t ${REGISTRY}/demo-webapp-frontend:${TAG} -f demo-webapp/frontend/Dockerfile demo-webapp/'
            }
        }

        stage('Push') {
            steps {
                sh 'echo "Logging into Docker registry..."'
                sh 'docker login ${REGISTRY} -u ${DOCKER_USER} -p ${DOCKER_PASSWORD}'
                sh 'docker push ${REGISTRY}/demo-webapp-backend:${TAG}'
                sh 'docker push ${REGISTRY}/demo-webapp-frontend:${TAG}'
            }
        }

        stage('Deploy') {
            when {
                expression { return fileExists('/var/jenkins_home/credentials/kubeconfig') }
            }
            steps {
                withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG')]) {
                    sh """
                        sed -i 's|\${REGISTRY}|${REGISTRY}|g' demo-webapp/k8s/webapp.yaml
                        sed -i 's|\${TAG}|${TAG}|g' demo-webapp/k8s/webapp.yaml
                        kubectl --kubeconfig=${KUBECONFIG} apply -f demo-webapp/k8s/
                    """
                }
            }
        }
    }
}