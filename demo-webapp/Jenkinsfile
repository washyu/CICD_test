pipeline {
    agent {
        docker {
            image 'docker:dind'
            args '-v /var/run/docker.sock:/var/run/docker.sock -v ${WORKSPACE}:/workspace -w /workspace'
        }
    }

    triggers {
        // Poll SCM every 5 minutes for changes
        pollSCM('H/5 * * * *')
    }

    options {
        // Keep only the last 10 builds
        buildDiscarder(logRotator(numToKeepStr: '10'))
        // Don't run concurrent builds for the same branch
        disableConcurrentBuilds()
    }

    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'main', description: 'Branch to build')
    }

    environment {
        REGISTRY = "aiserver:5000"
        TAG = "${BUILD_NUMBER}"
        DOCKER_CREDENTIALS = credentials('docker-registry-credentials')
        DOCKER_USER = "${DOCKER_CREDENTIALS_USR}"
        DOCKER_PASSWORD = "${DOCKER_CREDENTIALS_PSW}"
        // Use the parameter if the build is triggered manually, otherwise use the branch name from SCM
        BRANCH_TO_BUILD = "${params.BRANCH_NAME ?: env.BRANCH_NAME}"
    }

    stages {
        stage('Setup') {
            steps {
                sh 'apk add --no-cache curl'
                sh 'curl -LO "https://dl.k8s.io/release/stable.txt"'
                sh 'curl -LO "https://dl.k8s.io/release/$(cat stable.txt)/bin/linux/amd64/kubectl"'
                sh 'chmod +x kubectl'
                sh 'mv kubectl /usr/local/bin/'
            }
        }

        stage('Unit and Integration Tests') {
            steps {
                sh 'apk add --no-cache nodejs npm'
                sh 'cd demo-webapp/backend && npm install && npm test'
                catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                    sh '''
                        cd demo-webapp/frontend
                        npm install
                        npm install --save-dev jest-junit
                        mkdir -p junit-reports
                        npm run test:ci -- --watchAll=false
                    '''
                }
            }
            post {
                always {
                    catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                        junit(
                            allowEmptyResults: true,
                            testResults: 'demo-webapp/backend/junit.xml, demo-webapp/frontend/junit-reports/junit.xml'
                        )
                    }
                }
            }
        }

        stage('Functional Tests') {
            when {
                anyOf {
                    expression { return env.BRANCH_TO_BUILD == 'main' }
                    expression { return env.CHANGE_TARGET == 'main' }
                }
            }
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                    sh '''
                        # Install Chromium and other dependencies for Playwright
                        apk add --no-cache chromium xvfb dbus ttf-freefont fontconfig

                        # Set environment variables for Playwright
                        export PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1
                        export PLAYWRIGHT_BROWSERS_PATH=/usr/bin
                        export PLAYWRIGHT_CHROMIUM_EXECUTABLE_PATH=/usr/bin/chromium-browser

                        # Install Playwright without browser download
                        cd demo-webapp && npm install && npm install -D @playwright/test

                        # Create directory for Playwright JUnit reports
                        mkdir -p demo-webapp/playwright-junit

                        # Run tests with system Chromium
                        cd demo-webapp && PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1 npx playwright test --browser=chromium || echo "Playwright tests failed but continuing build"
                    '''
                }
            }
            post {
                always {
                    catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                        junit(
                            allowEmptyResults: true,
                            testResults: 'demo-webapp/playwright-junit/results.xml'
                        )
                    }
                }
            }
        }

        stage('Build') {
            // Continue with build even if tests failed
            when {
                expression { return true }
            }
            steps {
                sh 'ls -la'
                sh 'docker build -t ${REGISTRY}/demo-webapp-backend:${TAG} -f demo-webapp/backend/Dockerfile demo-webapp/'
                sh 'docker build -t ${REGISTRY}/demo-webapp-frontend:${TAG} -f demo-webapp/frontend/Dockerfile demo-webapp/'
            }
        }

        stage('Push') {
            // Only push images for main branch or PR to main
            when {
                anyOf {
                    expression { return env.BRANCH_TO_BUILD == 'main' }
                    expression { return env.CHANGE_TARGET == 'main' }
                }
            }
            steps {
                sh 'echo "Logging into Docker registry..."'
                sh 'docker login ${REGISTRY} -u ${DOCKER_USER} -p ${DOCKER_PASSWORD}'
                sh 'docker push ${REGISTRY}/demo-webapp-backend:${TAG}'
                sh 'docker push ${REGISTRY}/demo-webapp-frontend:${TAG}'
            }
        }

        stage('Deploy') {
            // Only deploy from main branch, not PRs
            when {
                allOf {
                    expression { return env.BRANCH_TO_BUILD == 'main' }
                    expression { return env.CHANGE_TARGET == null } // Not a PR
                    expression { return fileExists('/var/jenkins_home/credentials/kubeconfig') }
                }
            }
            steps {
                withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG')]) {
                    sh """
                        sed -i 's|\${REGISTRY}|${REGISTRY}|g' demo-webapp/k8s/webapp.yaml
                        sed -i 's|\${TAG}|${TAG}|g' demo-webapp/k8s/webapp.yaml
                        kubectl --kubeconfig=${KUBECONFIG} apply -f demo-webapp/k8s/
                    """
                }
            }
        }
    }

    post {
        success {
            echo 'Build succeeded! The application was built, tested, and deployed successfully.'
        }
        failure {
            echo 'Build failed! Please check the logs for more information.'
        }
        always {
            echo "Build completed for branch: ${env.BRANCH_TO_BUILD}"

            // Publish all test reports in one place
            catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                junit(
                    allowEmptyResults: true,
                    testResults: 'demo-webapp/backend/junit.xml, demo-webapp/frontend/junit-reports/junit.xml, demo-webapp/playwright-junit/results.xml',
                    skipPublishingChecks: false,
                    skipMarkingBuildUnstable: false
                )
            }
        }
    }
}